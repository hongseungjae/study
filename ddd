..
응용영역은 기능을 구현하기 위해 도메인 영역의 도메인 모델을 사용
로직을 직접 수행하기보다는 도메인 모델에 로직 수행을 위임

인프라스터럭처 영역은 구현 기술에 대한 것,,, 
RDBMS 연동,, 메시징 큐,,


표현
응용
도메인
인프라스트럭처

계층 구조는 상위 계층에서 하위 계층으로 의존,, 그반대는 하지 않음


DIP를 적용해서 저수준이 고수준에 의존하도록

응용이나 도메인 계층인 고수준에서는 인터페이스를 의존하도록하고
인프라스트럭처같은 저수준에서는 인터페이스를 구현한 클래스를 정의

도메인 모델의 엔티티와 DB 모델의 엔티티의 가장 큰 차이점은
도메인 모델의 엔티티는 데이터와 함께 도메인 기능을 함께 제공

애그리거트는 관련 객체를 하나로 묶은 군집
예를 들어 주문이라는 도메인 개념은 주문, 배송지 정보, 주문자, 주문목록 하위 모델로 구성

한 애그리거트에서 다른 애그리거트의 상태를 변경하는 것은 애그리거트 간의 의존 결합도를 높여서 결과적으로 애그리거트의 변경을 어렵게 만든다.

ID를 이용한 간접참조 MemberId memberId 이것처럼?? 

CQRS
명령모델과 조회모델을 분리하는 패턴

표현영역 책임
1. 사용자가 시스템을 사용할 수 있는 흐름(화면)을 제공하고 제어
2. 사용자의 요청을 알맞은 응용 서비스에 전달하고 결과를 사용자에게 제공
3. 사용자의 세션을 관리

값 검사
표현영역: 필수 값 ,값의 형식, 범위 등을 검증
응용서비스 : 데이터의 존재 유무와 같은 논리적 오류를 검증
+ 필자는 응용서비스에서 값오류까지 검증에서 코드는 더 많아지지만 응용 서비스의 완성도가 높아지는이점

도메인 서비스 
1. 계산 로직 : 여러 애그리거트가 필요한 계산 로직이나, 한 애그리거트에 넣기에는 다소 복잡한 계산 로직
2. 외부 시스템 연동이 필요한 도메인 로직: 구현하기 위해 타 시스템을 사용해야 하는 도메인 로직
